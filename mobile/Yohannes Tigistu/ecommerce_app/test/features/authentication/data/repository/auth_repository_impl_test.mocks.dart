// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_app/test/features/authentication/data/repository/auth_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ecommerce_app/core/network/network_info.dart' as _i3;
import 'package:ecommerce_app/features/authentication/data/datasources/auth_local_data_source.dart'
    as _i7;
import 'package:ecommerce_app/features/authentication/data/datasources/auth_remote_data_source.dart'
    as _i5;
import 'package:ecommerce_app/features/authentication/data/models/user_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i5.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserModel> signup(
    String? email,
    String? name,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signup, [email, name, password]),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#signup, [email, name, password]),
              ),
            ),
          )
          as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<String> login(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#login, [email, password]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i2.UserModel> getCurrentUser(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, [token]),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#getCurrentUser, [token]),
              ),
            ),
          )
          as _i4.Future<_i2.UserModel>);
}

/// A class which mocks [AuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalDataSource extends _i1.Mock
    implements _i7.AuthLocalDataSource {
  MockAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#cacheToken, [token]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> getToken() =>
      (super.noSuchMethod(
            Invocation.method(#getToken, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> clearToken() =>
      (super.noSuchMethod(
            Invocation.method(#clearToken, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
