// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_app/test/features/product/presentation/product_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ecommerce_app/core/errors/failures.dart' as _i5;
import 'package:ecommerce_app/core/success/confirmation.dart' as _i8;
import 'package:ecommerce_app/core/usecases/usecase.dart' as _i12;
import 'package:ecommerce_app/core/utils/input_converter.dart' as _i4;
import 'package:ecommerce_app/features/Products/domain/entities/product.dart'
    as _i9;
import 'package:ecommerce_app/features/Products/domain/repositories/product_repository.dart'
    as _i3;
import 'package:ecommerce_app/features/Products/domain/usecases/create_new_product_usecase.dart'
    as _i6;
import 'package:ecommerce_app/features/Products/domain/usecases/delete_product_usecase.dart'
    as _i10;
import 'package:ecommerce_app/features/Products/domain/usecases/update_product_usecase.dart'
    as _i13;
import 'package:ecommerce_app/features/Products/domain/usecases/view_all_products_usecase.dart'
    as _i11;
import 'package:ecommerce_app/features/Products/domain/usecases/view_specific_product_usecase.dart'
    as _i14;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductRepository_1 extends _i1.SmartFake
    implements _i3.ProductRepository {
  _FakeProductRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i4.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<_i5.Failures, double> stringToUnsignedDouble(String? str) =>
      (super.noSuchMethod(
            Invocation.method(#stringToUnsignedDouble, [str]),
            returnValue: _FakeEither_0<_i5.Failures, double>(
              this,
              Invocation.method(#stringToUnsignedDouble, [str]),
            ),
          )
          as _i2.Either<_i5.Failures, double>);
}

/// A class which mocks [CreateNewProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateNewProductUsecase extends _i1.Mock
    implements _i6.CreateNewProductUsecase {
  MockCreateNewProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ProductRepository);

  @override
  _i7.Future<_i2.Either<_i5.Failures, _i8.Confirmation>> call(
    _i9.Product? product,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [product]),
            returnValue:
                _i7.Future<_i2.Either<_i5.Failures, _i8.Confirmation>>.value(
                  _FakeEither_0<_i5.Failures, _i8.Confirmation>(
                    this,
                    Invocation.method(#call, [product]),
                  ),
                ),
          )
          as _i7.Future<_i2.Either<_i5.Failures, _i8.Confirmation>>);
}

/// A class which mocks [DeleteProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductUsecase extends _i1.Mock
    implements _i10.DeleteProductUsecase {
  MockDeleteProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ProductRepository);

  @override
  _i7.Future<_i2.Either<_i5.Failures, _i8.Confirmation>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue:
                _i7.Future<_i2.Either<_i5.Failures, _i8.Confirmation>>.value(
                  _FakeEither_0<_i5.Failures, _i8.Confirmation>(
                    this,
                    Invocation.method(#call, [id]),
                  ),
                ),
          )
          as _i7.Future<_i2.Either<_i5.Failures, _i8.Confirmation>>);
}

/// A class which mocks [ViewAllProductsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewAllProductsUsecase extends _i1.Mock
    implements _i11.ViewAllProductsUsecase {
  MockViewAllProductsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ProductRepository);

  @override
  _i7.Future<_i2.Either<_i5.Failures, List<_i9.Product>>> call(
    _i12.NoParams? NoParams,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [NoParams]),
            returnValue:
                _i7.Future<_i2.Either<_i5.Failures, List<_i9.Product>>>.value(
                  _FakeEither_0<_i5.Failures, List<_i9.Product>>(
                    this,
                    Invocation.method(#call, [NoParams]),
                  ),
                ),
          )
          as _i7.Future<_i2.Either<_i5.Failures, List<_i9.Product>>>);
}

/// A class which mocks [UpdateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUsecase extends _i1.Mock
    implements _i13.UpdateProductUsecase {
  MockUpdateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ProductRepository);

  @override
  _i7.Future<_i2.Either<_i5.Failures, _i8.Confirmation>> call(
    _i9.Product? product,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [product]),
            returnValue:
                _i7.Future<_i2.Either<_i5.Failures, _i8.Confirmation>>.value(
                  _FakeEither_0<_i5.Failures, _i8.Confirmation>(
                    this,
                    Invocation.method(#call, [product]),
                  ),
                ),
          )
          as _i7.Future<_i2.Either<_i5.Failures, _i8.Confirmation>>);
}

/// A class which mocks [ViewSpecificProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewSpecificProductUsecase extends _i1.Mock
    implements _i14.ViewSpecificProductUsecase {
  MockViewSpecificProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ProductRepository);

  @override
  _i7.Future<_i2.Either<_i5.Failures, _i9.Product>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue:
                _i7.Future<_i2.Either<_i5.Failures, _i9.Product>>.value(
                  _FakeEither_0<_i5.Failures, _i9.Product>(
                    this,
                    Invocation.method(#call, [id]),
                  ),
                ),
          )
          as _i7.Future<_i2.Either<_i5.Failures, _i9.Product>>);
}
